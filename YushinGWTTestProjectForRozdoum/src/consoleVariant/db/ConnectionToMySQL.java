/*
    This is the test project for Rozdoum
 */
package consoleVariant.db;

import consoleVariant.Client;
import java.sql.*;
import java.util.ArrayList;

/**
 * class with methods for connection database
 *
 * @author      Yushin Roman
 * @version     28.06.2016
 */
public class ConnectionToMySQL {

    /**
     * URL of database
     */
    private static final String URL = "jdbc:mysql://localhost/yushin_gwt_test_project_for_rozdoum_db?SSL=false";

    /**
     * user name
     */
    private static final String DATABASE_USER_NAME = "root";

    /**
     * user password
     */
    private static final String PASSWORD = "1111";

    /**
     * variable for connection with database
     */
    private static Connection connection;

    /**
     * An object that represents a precompiled SQL statement.
     */
    private static PreparedStatement statement;

    /**
     * A table of data representing a database result set, which
     * is usually generated by executing a statement that queries the database.
     */
    private static ResultSet resultSet;

    /**
     * method for add new client in database
     *
     * @param newClient     client for adding
     */
    public static void addNewClientInDB (Client newClient) {

        /**
         * sql query for add new client in database
         */
        String SQLQuery = "INSERT INTO `yushin_gwt_test_project_for_rozdoum_db`.`clients` " +
                "(`id`,`Name`, `Surname`, `email`, `dataOfBirth`, `sex`)" +
                " VALUES ('"+ newClient.getId() + "', '" + newClient.getName() + "', '"+ newClient.getSurname() + "', '"+
                newClient.getEmailOrIndefined() + "', '"+ newClient.getDataOfBirthOrIndefined() + "', '" + newClient.getSexOrIndefined()+"');";

        openConnection();

        try {
            statement = connection.prepareStatement(SQLQuery);
            statement.execute();
            //statement.executeUpdate(SQLQuery);
        } catch (SQLException e ) {
            e.printStackTrace();
        } finally {
            // close connection
            try {connection.close();} catch (SQLException e) {}
            try {statement.close();} catch (SQLException e) {}
        }
    }

    /**
     * method for remove oldClient from database
     *
     * @param oldClient     client for removing
     */
    public static void removeClientFromDB (Client oldClient) {

        /**
         * sql query for remove oldClient parameter from database
         */
        String SQLQuery = "DELETE FROM yushin_gwt_test_project_for_rozdoum_db.clients" +
                " WHERE (Name = ?);";

        openConnection();
        try {
            statement = connection.prepareStatement(SQLQuery);
            statement.setString(1, oldClient.getName());
            statement.executeUpdate();

            //statement.executeUpdate(SQLQuery);
            //connection.commit();
        } catch (SQLException e ) {
            e.printStackTrace();
        } finally {
            // close connection
            try {connection.close();} catch (SQLException e) {}
            try {statement.close();} catch (SQLException e) {}
        }
    }

    /**
     * get all clients from db
     *
     * @return      collection with all clients
     */
    public static ArrayList<Client> getAllClientsFromDB () {
        ArrayList<Client> clientsFromDB = new ArrayList<>();
        String SQLQuery = "SELECT * FROM Clients;";
        openConnection();
        try {
            statement = connection.prepareStatement(SQLQuery);
            statement.execute();
            resultSet = statement.getResultSet();

            //resultSet = statement.executeQuery(SQLQuery);

            // add clients in collection
            int i = 0;
            while (resultSet.next()) {

                clientsFromDB.add(i++, new Client(resultSet.getInt(1), resultSet.getString(2), resultSet.getString(3),
                        resultSet.getString(4), resultSet.getString(5), resultSet.getString(6)));
            }
        } catch (SQLException e ) {
            e.printStackTrace();
        } finally {
            //close connection
            try {connection.close();} catch (SQLException e) {}
            try {statement.close();} catch (SQLException e) {}
            try {resultSet.close();} catch (SQLException e) {}
        }
        return clientsFromDB;
    }

    /**
     * open connection method
     */
    private static void openConnection() {
        try {
            connection = DriverManager.getConnection(URL, DATABASE_USER_NAME, PASSWORD);
            //statement = connection.createStatement();
            //statement =  connection.createStatement();
        } catch (SQLException e ) {
            e.printStackTrace();
        }
    }

}
